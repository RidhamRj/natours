/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* 
    Normalize the CSS to make every browser render the page in the exact same way 
    The universal selector selects every element on the webpage and apply the declarations
*/
* {
    padding: 0;
    margin: 0;
    /* 
        Change the box model so that the borders and paddings are no longer added to
        the total width or the total height that we specify for a box.
    */
    box-sizing: border-box;
}

/*
    The parent element of all the other elements
*/
body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    /*
        The line height is 1.7 times bigger than the predefined (default) line height
    */
    line-height: 1.7;
    color: #777;
    background: #000;
    /*padding: 30px;*/
}

.header {
    /*
        At every point, the height of this box (element) should be 95% of the viewport height
    */
    height: 95vh;
    background-image: linear-gradient(
        to right bottom, 
        rgba(126, 213, 111, 0.8), 
        rgba(40, 180, 131, 0.8)), 
        url(../img/hero.jpg);
    /* 
        Whatever the width of the viewport (or the element), it will always 
        try to fit the element inside of the box
    */
    background-size: cover;
    background-position: top;
    position: relative;
    clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
}

.logo-box {
    /* 
        Guides itself by the parent element
        The parent element is the header in this case
        I need to add position: relative to the parent element
    */
    position: absolute;
    top: 40px;
    left: 40px;
}

.logo {
    height: 35px;
}

.text-box {
    position: absolute;
    /*
        40% top and 50% left from the parent element because of the position: absolute
        The parent element is the header
    */
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;
    text-align: center;
    /* 
        This property determines if the back part of an element when 
        we transform it is visible or hidden for the user
    */
    backface-visibility: hidden;
}

.heading-primary-main {
    display: block;
    font-size: 60px;
    font-weight: 900;
    letter-spacing: 35px;

    animation-name: moveInLeft;
    animation-duration: 2.5s;
    animation-timing-function: ease-in-out;
}

.heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17.5px;

    animation: moveInRight 2.5s ease-in-out;
}

/* ANIMATIONS */
@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-140px);
    }

    80% {
        transform: translateX(10px);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(140px);
    }

    80% {
        transform: translateX(-10px);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(50px);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

/* 
    This is a pseudo-class.
    Pseudo-classes are special states of a selector

    Transition needs to be on the initial state
*/
.btn:link,
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 15px 40px;
    display: inline-block;
    margin: 50px;
    border-radius: 50px;
    transition: all .2s;
    position: relative;
}

.btn:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 10px rgba(0,0,0,0.5);
}

/* 
    Move the button up
*/
.btn:active {
    transform: translateY(-1px);
}

.btn-white {
    background-color: white;
    color: #777;
}

/* 
    Pseudo-elements allow us to style certain parts of the elements
    For example, the :after pseudo-element adds like a virtual element
    right after the element we're selecting.

    For an ::after element to appear on the page,
    we need to specify its content property.
*/
.btn::after {
    content: '';
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 100px;
    /* 
        With absolute positioning, it needs to have a reference.
        The reference is the first element with the relative position that it can find.
    */
    position: absolute;
    top: 0;
    left: 0;
    /*
        Defines the position of the elements if they are one on top of the another.
        This is behind the button.
    */
    z-index: -1;
    transition: all .4s;
}

.btn-white::after {
    background-color: white;
}

.btn:hover::after {
    transform: scaleX(1.2) scaleY(1.4);
    opacity: 0;
}

.btn-animated {
    /* Shorthand for animation-name, animation-duration, animation-timing-function, and animation-delay */
    animation: moveInBottom 2.5s ease-out .75s;
    /* Automatically apply the styles up to 0% before the animation starts */
    animation-fill-mode: backwards;
}