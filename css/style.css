/* COLORS */
/* GRID VARIABLES */
/* SPACE BETWEEN THE COLUMNS */
/* 
    Append a pseudo-element after the element which will then clear these floats
*/
/* 
    Normalize the CSS to make every browser render the page in the exact same way 
    The universal selector selects every element on the webpage and apply the declarations
*/
*,
*::after,
*::before {
  padding: 0;
  margin: 0;
  box-sizing: inherit; }

html {
  /* This defines what 1 REM is */
  font-size: 62.5%; }

/*
    The parent element of all the other elements
*/
body {
  /* 
        Change the box model so that the borders and paddings are no longer added to
        the total width or the total height that we specify for a box.
    */
  box-sizing: border-box; }

/* ANIMATIONS */
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-14rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(14rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(5rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

/*
    The parent element of all the other elements
*/
body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /*
        The line height is 1.7 times bigger than the predefined (default) line height
    */
  line-height: 1.7;
  color: #777; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  text-align: center;
  /* 
        This property determines if the back part of an element when 
        we transform it is visible or hidden for the user
    */
  backface-visibility: hidden; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 900;
    letter-spacing: 2.5rem;
    white-space: nowrap;
    animation-name: moveInLeft;
    animation-duration: 2.5s;
    animation-timing-function: ease-in-out; }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 2.5s ease-in-out; }

.heading-secondary {
  display: inline-block;
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  background-image: linear-gradient(to right, #E6DADA, #274046);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  letter-spacing: 2px;
  transition: all .10s; }
  .heading-secondary:hover {
    transform: skewX(10deg) skewY(0.5deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.u-center-text {
  text-align: center; }

.u-margin-bottom-8 {
  margin-bottom: 8rem; }

.btn {
  /* 
        This is a pseudo-class.
        Pseudo-classes are special states of a selector

        Transition needs to be on the initial state
    */
  /* 
        Move the button up
    */
  /* 
        Pseudo-elements allow us to style certain parts of the elements
        For example, the :after pseudo-element adds like a virtual element
        right after the element we're selecting.
    
        For an ::after element to appear on the page,
        we need to specify its content property.
    */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    margin: 5rem;
    border-radius: 5rem;
    transition: all .2s;
    position: relative;
    font-size: 1.6rem; }
  .btn:hover {
    transform: translateY(-0.5rem);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.5); }
    .btn:hover::after {
      transform: scaleX(1.2) scaleY(1.4);
      opacity: 0; }
  .btn:active {
    transform: translateY(-0.1rem); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    content: '';
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* 
            With absolute positioning, it needs to have a reference.
            The reference is the first element with the relative position that it can find.
        */
    position: absolute;
    top: 0;
    left: 0;
    /*
            Defines the position of the elements if they are one on top of the another.
            This is behind the button.
        */
    z-index: -1;
    transition: all .4s; }
  .btn--animated {
    /* Shorthand for animation-name, animation-duration, animation-timing-function, and animation-delay */
    animation: moveInBottom 2.5s ease-out .75s;
    /* Automatically apply the styles up to 0% before the animation starts */
    animation-fill-mode: backwards; }

.row {
  /* 
        If there is enough available space,
        then it will have the width that we have specified.

        If there isn't enough space (viewport smaller than what we specified here),
        then it simply fills 100% of the available space.
    */
  max-width: 114rem;
  /*
        Center block elements inside of another block element.
    */
  margin: 0 auto;
  /* 
        Apply the margin-bottom to all the elements except the last one.
    */
  /*
        Select all the clasess that start with "col-"
    */ }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc(3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }

.grid-test {
  margin-top: 8rem; }

.header {
  /*
        At every point, the height of this box (element) should be 95% of the viewport height
    */
  height: 100vh;
  background-image: linear-gradient(to right bottom, rgba(230, 218, 218, 0.6), rgba(39, 64, 70, 0.6)), url(../img/hero.jpg);
  /* 
        Whatever the width of the viewport (or the element), it will always 
        try to fit the element inside of the box
    */
  background-size: cover;
  background-position: top;
  position: relative; }
  .header__logo-box {
    /* 
            Guides itself by the parent element
            The parent element is the header in this case
            I need to add position: relative to the parent element
        */
    position: absolute;
    top: 15%;
    left: 50%;
    transform: translate(-50%, -50%); }
  .header__logo {
    height: 5.5rem; }
  .header__text-box {
    position: absolute;
    /*
            40% top and 50% left from the parent element because of the position: absolute
            The parent element is the header
        */
    top: 39%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center; }

.section-about {
  background-color: #f7f7f7;
  padding: 20rem 0; }
