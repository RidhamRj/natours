/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

$primary-color: #55c57a;
$primary-color-light: #E6DADA;
$primary-color-dark: #274046;

$color-grey-dark: #777;
$color-white: #fff;
$color-black: #000;

/* 
    Normalize the CSS to make every browser render the page in the exact same way 
    The universal selector selects every element on the webpage and apply the declarations
*/
*,
*::after,
*::before {
    padding: 0;
    margin: 0;
    box-sizing: inherit;
}

html {
    font-size: 62.5%;
}

/*
    The parent element of all the other elements
*/
body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    /*
        The line height is 1.7 times bigger than the predefined (default) line height
    */
    line-height: 1.7;
    color: $color-grey-dark;
    background: #000;
    /*padding: 3rem;*/
    /* 
        Change the box model so that the borders and paddings are no longer added to
        the total width or the total height that we specify for a box.
    */
    box-sizing: border-box;
}

.header {
    /*
        At every point, the height of this box (element) should be 95% of the viewport height
    */
    height: 100vh;
    background-image: linear-gradient(
        to right bottom, 
        rgba($primary-color-light, 0.6), 
        rgba($primary-color-dark, 0.6)), 
        url(../img/hero.jpg);
    /* 
        Whatever the width of the viewport (or the element), it will always 
        try to fit the element inside of the box
    */
    background-size: cover;
    background-position: top;
    position: relative;

    &__logo-box {
        /* 
            Guides itself by the parent element
            The parent element is the header in this case
            I need to add position: relative to the parent element
        */
        position: absolute;
        top: 15%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    &__logo {
        height: 5.5rem;
    }

    &__text-box {
        position: absolute;
        /*
            40% top and 50% left from the parent element because of the position: absolute
            The parent element is the header
        */
        top: 39%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
    }
}

.heading-primary {
    color: $color-white;
    text-transform: uppercase;
    text-align: center;
    /* 
        This property determines if the back part of an element when 
        we transform it is visible or hidden for the user
    */
    backface-visibility: hidden;

    &--main {
        display: block;
        font-size: 6rem;
        font-weight: 900;
        letter-spacing: 2.5rem;
        white-space: nowrap;
    
        animation-name: moveInLeft;
        animation-duration: 2.5s;
        animation-timing-function: ease-in-out;
    }

    &--sub {
        display: block;
        font-size: 2rem;
        font-weight: 700;
        letter-spacing: 1.75rem;
    
        animation: moveInRight 2.5s ease-in-out;
    }
}

/* ANIMATIONS */
@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-14rem);
    }

    80% {
        transform: translateX(1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(14rem);
    }

    80% {
        transform: translateX(-1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(5rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

.btn {
    /* 
        This is a pseudo-class.
        Pseudo-classes are special states of a selector

        Transition needs to be on the initial state
    */
    &:link,
    &:visited {
        text-transform: uppercase;
        text-decoration: none;
        padding: 1.5rem 4rem;
        display: inline-block;
        margin: 5rem;
        border-radius: 5rem;
        transition: all .2s;
        position: relative;
        font-size: 1.6rem;
    }

    &:hover {
        transform: translateY(-.5rem);
        box-shadow: 0 .5rem 1rem rgba($color-black,0.5);

        &::after {
            transform: scaleX(1.2) scaleY(1.4);
            opacity: 0;
        }
    }

    /* 
        Move the button up
    */
    &:active {
        transform: translateY(-.1rem);
    }

    &--white {
        background-color: $color-white;
        color: $color-grey-dark;

        &::after {
            background-color: $color-white;
        }
    }
    
    /* 
        Pseudo-elements allow us to style certain parts of the elements
        For example, the :after pseudo-element adds like a virtual element
        right after the element we're selecting.
    
        For an ::after element to appear on the page,
        we need to specify its content property.
    */
    &::after {
        content: '';
        display: inline-block;
        height: 100%;
        width: 100%;
        border-radius: 10rem;
        /* 
            With absolute positioning, it needs to have a reference.
            The reference is the first element with the relative position that it can find.
        */
        position: absolute;
        top: 0;
        left: 0;
        /*
            Defines the position of the elements if they are one on top of the another.
            This is behind the button.
        */
        z-index: -1;
        transition: all .4s;
    }
    
    &--animated {
        /* Shorthand for animation-name, animation-duration, animation-timing-function, and animation-delay */
        animation: moveInBottom 2.5s ease-out .75s;
        /* Automatically apply the styles up to 0% before the animation starts */
        animation-fill-mode: backwards;
    }
}